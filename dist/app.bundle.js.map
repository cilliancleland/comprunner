{"version":3,"sources":["webpack:///app.bundle.js","webpack:///./components/swissChessComponent.js","webpack:///./components/swissChessController.js","webpack:///./components/swissChessDirectives.js","webpack:///./services/game.js","webpack:///./services/players.js","webpack:///./views/about.html","webpack:///./views/menu.html","webpack:///./views/player-details.html","webpack:///./views/results.html","webpack:///./views/round.html","webpack:///./views/setup.html","webpack:///./views/swiss-chess.html","webpack:///./views/tabs.html","webpack:///./app.js"],"names":["webpackJsonp","module","exports","__webpack_require__","angular","component","template","controller","swissChessCtrl","$scope","players","game","getSavedDetails","savedObj","title","numRounds","numPlayers","savedOn","saved","showAbout","toggleAbout","init","savedGame","localStorage","getItem","SAVED_GAME_NAME","JSON","parse","reset","confirm","RESET_PROMPT","deleteSave","DELETE_PROMPT","removeItem","save","initialised","SAVE_PROMPT","saveObj","getSaveObj","setItem","stringify","load","isInitialised","LOAD_PROMPT","saveStr","setFromSaveObj","getAllPlayers","showTab","tab","activeTab","$inject","directive","type","scope","runSetup","playerOrder","setupFirstRound","round","completeRound","isCurrentRound","link","element","attr","submit","roundForm","$setPristine","$setUntouched","finalOrder","gameFactory","completeComp","generateCountBack","sortPlayers","Object","keys","currentRoundNumber","roundNumber","rounds","gameNumber","games","player1","getPlayerById","player2","result","countBack","score","formatAMPM","d","Date","minutes","getMinutes","toString","length","hours","getHours","ampm","months","getDay","getMonth","getDate","getFullYear","resetPlayers","getStarted","initPlayers","setupRound","newRoundNumber","currentRound","shufflePlayers","numGames","i","gameId","POINTS_FOR_WIN","POINTS_FOR_BYE","POINTS_FOR_DRAW","nextRoundNumber","parseInt","setAllPlayers","factory","playersFactory","currentOrder","sortBy","sort","a","b","modifier","unshift","splice","id","newPlayers","assign"],"mappings":"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","file":"app.bundle.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */,\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(7);\n__webpack_require__(6);\n__webpack_require__(5);\n__webpack_require__(4);\n\nangular.module('swissChess').component('swissChess', {\n  template: __webpack_require__(14),\n  controller: \"swissChessCtrl\"\n});\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 3 */,\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar SAVE_PROMPT = \"Are you sure, this will overwrite your saved competition?\\n\\nPress ok to continue.\";\nvar LOAD_PROMPT = \"Are you sure, this will overwrite all details of your current competition?\\n\\nPress ok to continue.\";\nvar DELETE_PROMPT = \"Are you sure, this will delete your saved competition?\\n\\nPress ok to continue.\";\nvar RESET_PROMPT = \"Are you sure, this will clear your current competition?\\n\\nPress ok to continue.\";\nvar SAVED_GAME_NAME = \"savedComp\";\nswissChessCtrl.$inject = ['$scope', 'playersFactory', 'gameFactory'];\n\nangular.module('swissChess').controller('swissChessCtrl', swissChessCtrl);\n\nfunction swissChessCtrl($scope, players, game) {\n\n    $scope.saved = false;\n    $scope.showAbout = false;\n\n    $scope.toggleAbout = function toggleAbout() {\n        $scope.showAbout = !$scope.showAbout;\n    };\n\n    // initialises the game and checks if there is a saved game that can be loaded\n    $scope.init = function init() {\n        game.init();\n        var savedGame = localStorage.getItem(SAVED_GAME_NAME);\n        if (savedGame) {\n            var savedObj = JSON.parse(savedGame);\n            $scope.saved = getSavedDetails(savedObj);\n        }\n    };\n\n    //reset the competition\n    $scope.reset = function reset() {\n        if (!confirm(RESET_PROMPT)) {\n            return;\n        }\n        $scope.init();\n    };\n\n    // reads some details of any save game\n    function getSavedDetails(savedObj) {\n        return \"Competition \" + savedObj.title + \" (\" + savedObj.numRounds + \" rounds : \" + savedObj.numPlayers + \" players) Saved on \" + savedObj.savedOn;\n    }\n\n    // deletes a saved game\n    $scope.deleteSave = function deleteSave() {\n        if (!confirm(DELETE_PROMPT)) {\n            return;\n        }\n        localStorage.removeItem(SAVED_GAME_NAME);\n        $scope.saved = false;\n    };\n\n    // saves the game details to local storage\n    $scope.save = function save() {\n        if ($scope.saved && game.initialised && !confirm(SAVE_PROMPT)) {\n            return;\n        }\n        var saveObj = game.getSaveObj();\n        localStorage.setItem(SAVED_GAME_NAME, JSON.stringify(saveObj));\n        $scope.saved = getSavedDetails(saveObj);\n    };\n\n    // loads the game details from local storage\n    $scope.load = function load() {\n        if (game.isInitialised && !confirm(LOAD_PROMPT)) {\n            return;\n        }\n        var saveStr = localStorage.getItem(SAVED_GAME_NAME);\n        var saveObj = JSON.parse(saveStr);\n        game.setFromSaveObj(saveObj);\n    };\n\n    //bind player functions\n    $scope.getAllPlayers = function getAllPlayers() {\n        return players.getAllPlayers();\n    };\n\n    //bind game\n    $scope.game = game;\n\n    $scope.showTab = function showTab(tab) {\n        game.activeTab = tab;\n    };\n\n    //initialise the comp\n    $scope.init();\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nangular.module('swissChess').directive(\"scTabs\", function () {\n  return {\n    type: \"E\",\n    template: __webpack_require__(15)\n  };\n});\n\nangular.module('swissChess').directive(\"scAbout\", function () {\n  return {\n    type: \"E\",\n    template: __webpack_require__(8)\n  };\n});\n\nangular.module('swissChess').directive(\"scMenu\", function () {\n  return {\n    type: \"E\",\n    template: __webpack_require__(9)\n  };\n});\n\nangular.module('swissChess').directive(\"scSetup\", function () {\n  return {\n    type: \"E\",\n    scope: {\n      runSetup: \"&setup\",\n      game: \"=\"\n    },\n    template: __webpack_require__(13)\n  };\n});\n\nangular.module('swissChess').directive(\"scPlayerDetails\", function () {\n  return {\n    type: \"E\",\n    scope: {\n      players: \"=\",\n      playerOrder: \"=\",\n      setupFirstRound: \"&\"\n    },\n    template: __webpack_require__(10)\n  };\n});\n\nangular.module('swissChess').directive(\"scRound\", function () {\n  return {\n    type: \"E\",\n    scope: {\n      players: \"=\",\n      round: \"=\",\n      completeRound: \"&\",\n      isCurrentRound: \"@\"\n    },\n    link: function link(scope, element, attr) {\n      scope.submit = function () {\n        scope.roundForm.$setPristine();\n        scope.roundForm.$setUntouched();\n        scope.completeRound();\n      };\n    },\n    template: __webpack_require__(12)\n  };\n});\n\nangular.module('swissChess').directive(\"scResults\", function () {\n  return {\n    type: \"E\",\n    scope: {\n      players: \"=\",\n      finalOrder: \"=\"\n    },\n    template: __webpack_require__(11)\n  };\n});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar POINTS_FOR_WIN = 3;\nvar POINTS_FOR_BYE = 3;\nvar POINTS_FOR_DRAW = 1;\n\ngameFactory.$inject = ['playersFactory'];\nangular.module('swissChess').factory(\"gameFactory\", gameFactory);\n\nfunction gameFactory(players) {\n\n  var gameFactory = {};\n  gameFactory.rounds = {};\n  gameFactory.playerOrder = [];\n\n  // returns all properties to their empty defaults\n  gameFactory.init = function init() {\n    gameFactory.activeTab = \"\";\n    gameFactory.isInitialised = false;\n    gameFactory.numPlayers = null;\n    gameFactory.numRounds = null;\n    gameFactory.title = null;\n    players.resetPlayers();\n    gameFactory.currentRoundNumber = \"0\";\n    gameFactory.rounds = {};\n    gameFactory.playerOrder = [];\n    gameFactory.finalOrder = [];\n  };\n\n  //initialises the game and the players, and sets the tab to the players screen\n  gameFactory.getStarted = function getStarted() {\n    gameFactory.isInitialised = true;\n    players.initPlayers(gameFactory.numPlayers);\n    gameFactory.activeTab = \"players\";\n  };\n\n  // sets up the initial player order and the first round\n  gameFactory.setupFirstRound = function setupFirstRound() {\n    gameFactory.playerOrder = Object.keys(players.getAllPlayers());\n    gameFactory.setupRound(\"1\");\n  };\n\n  // sets up the games in a round\n  // called when moving onto a new round\n  gameFactory.setupRound = function setupRound(newRoundNumber) {\n    gameFactory.currentRoundNumber = newRoundNumber;\n    gameFactory.rounds[newRoundNumber] = { roundNumber: newRoundNumber, games: {} };\n    var currentRound = gameFactory.rounds[gameFactory.currentRoundNumber];\n    players.shufflePlayers(gameFactory.playerOrder);\n\n    var numGames = gameFactory.playerOrder.length / 2;\n    for (var i = 0; i < numGames; i++) {\n      currentRound.games[i + 1] = {\n        gameNumber: i + 1,\n        player1: gameFactory.playerOrder[i],\n        player2: gameFactory.playerOrder[gameFactory.playerOrder.length - i - 1],\n        result: i === gameFactory.playerOrder.length - i - 1 ? 'bye' : ''\n      };\n    }\n    gameFactory.activeTab = newRoundNumber;\n  };\n\n  // completes a round\n  // called when finishing that round\n  gameFactory.completeRound = function completeRound() {\n    var round = gameFactory.rounds[gameFactory.currentRoundNumber];\n\n    for (var gameId in round.games) {\n      var game = round.games[gameId];\n      var player1 = players.getPlayerById(game.player1);\n      var player2 = players.getPlayerById(game.player2);\n      switch (game.result) {\n        case \"Player 1 win\":\n          player1.score += POINTS_FOR_WIN;\n          break;\n        case \"Player 2 win\":\n          player2.score += POINTS_FOR_WIN;\n          break;\n        case \"bye\":\n          player1.score += POINTS_FOR_BYE;\n          break;\n        default:\n          //a draw\n          player1.score += POINTS_FOR_DRAW;\n          player2.score += POINTS_FOR_DRAW;\n      }\n    }\n    if (gameFactory.numRounds == gameFactory.currentRoundNumber) {\n      completeComp();\n      gameFactory.activeTab = \"results\";\n    } else {\n      var nextRoundNumber = parseInt(gameFactory.currentRoundNumber) + 1;\n      gameFactory.setupRound(nextRoundNumber);\n    }\n  };\n  //completes a competition and generates the results\n  function completeComp() {\n    generateCountBack();\n    gameFactory.finalOrder = players.sortPlayers(Object.keys(players.getAllPlayers()), \"countBack\");\n    gameFactory.finalOrder = players.sortPlayers(gameFactory.finalOrder, \"score\");\n    gameFactory.currentRoundNumber = 0;\n  }\n\n  // generates the countback for each player by adding the scores of all the players they have beaten\n  function generateCountBack() {\n    for (var roundNumber in gameFactory.rounds) {\n      var round = gameFactory.rounds[roundNumber];\n      for (var gameNumber in round.games) {\n        var game = round.games[gameNumber];\n        var player1 = players.getPlayerById(game.player1);\n        var player2 = players.getPlayerById(game.player2);\n        switch (game.result) {\n          case \"Player 1 win\":\n            player1.countBack += player2.score;\n            break;\n          case \"Player 2 win\":\n            player2.countBack += player1.score;\n            break;\n          case \"bye\":\n            break;\n          default:\n            player1.countBack += player2.score / 2;\n            player2.countBack += player1.score / 2;\n        }\n      }\n    }\n  }\n\n  // takes the comp's  state and puts it into an object that can be saved\n  gameFactory.getSaveObj = function getSaveObj() {\n    var saveObj = {};\n    saveObj.finalOrder = gameFactory.finalOrder;\n    saveObj.isInitialised = gameFactory.isInitialised;\n    saveObj.numPlayers = gameFactory.numPlayers;\n    saveObj.numRounds = gameFactory.numRounds;\n    saveObj.title = gameFactory.title;\n    saveObj.rounds = gameFactory.rounds;\n    saveObj.currentRoundNumber = gameFactory.currentRoundNumber;\n    saveObj.players = players.getAllPlayers();\n    saveObj.activeTab = gameFactory.activeTab;\n    saveObj.playerOrder = gameFactory.playerOrder;\n    saveObj.savedOn = formatAMPM();\n    return saveObj;\n  };\n\n  // sets all the game details from a save object that is passed in\n  gameFactory.setFromSaveObj = function setFromSaveObj(saveObj) {\n    gameFactory.finalOrder = saveObj.finalOrder;\n    gameFactory.isInitialised = saveObj.isInitialised;\n    gameFactory.numPlayers = saveObj.numPlayers;\n    gameFactory.numRounds = saveObj.numRounds;\n    gameFactory.title = saveObj.title;\n    gameFactory.rounds = saveObj.rounds;\n    gameFactory.currentRoundNumber = saveObj.currentRoundNumber;\n    players.setAllPlayers(saveObj.players);\n    gameFactory.activeTab = saveObj.activeTab;\n    gameFactory.playerOrder = saveObj.playerOrder;\n  };\n\n  function formatAMPM() {\n    var d = new Date(),\n        minutes = d.getMinutes().toString().length == 1 ? '0' + d.getMinutes() : d.getMinutes(),\n        hours = d.getHours().toString().length == 1 ? '0' + d.getHours() : d.getHours(),\n        ampm = d.getHours() >= 12 ? 'pm' : 'am',\n        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return days[d.getDay()] + ' ' + months[d.getMonth()] + ' ' + d.getDate() + ' ' + d.getFullYear() + ' ' + hours + ':' + minutes + ampm;\n  }\n\n  return gameFactory;\n}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nangular.module('swissChess').factory(\"playersFactory\", [function () {\n  var players = {};\n  var playersFactory = {};\n\n  playersFactory.sortPlayers = function sortPlayers(currentOrder, sortBy) {\n    return currentOrder.sort(function (a, b) {\n      return players[b][sortBy] - players[a][sortBy];\n    });\n  };\n\n  playersFactory.shufflePlayers = function shufflePlayers(currentOrder) {\n    var modifier = currentOrder.length % 2 ? 1 : 2; //if an odd number of players, we need to adjust our shuffle, else the last player never gets a bye\n    currentOrder.unshift(currentOrder[currentOrder.length - modifier]);\n    currentOrder.splice(currentOrder.length - modifier, 1);\n  };\n\n  playersFactory.initPlayers = function initPlayers(numPlayers) {\n    for (var i = 0; i < numPlayers; i++) {\n      players[i + 1] = { id: i + 1, score: 0, countBack: 0 };\n    }\n  };\n\n  playersFactory.resetPlayers = function resetPlayers() {\n    players = {};\n  };\n\n  playersFactory.setAllPlayers = function setAllPlayers(newPlayers) {\n    players = Object.assign({}, newPlayers);\n  };\n\n  playersFactory.getAllPlayers = function getAllPlayers() {\n    return players;\n  };\n\n  playersFactory.getPlayerById = function getPlayer(id) {\n    return players[id];\n  };\n\n  return playersFactory;\n}]);\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<h2>About Comp Runner</h2> <p>Comp Runner is a simple app, designed to run on any modern browser, to help tournament organisers to keep track of scoring.</p> <p>Version 1 automatically organises players into rounds based on a simple round robin algorithm.</p> <p>Scoring is handled automatically, with 3 points for a win and 1 point for a draw. Countback is handled at the end of a comp by summing the scores of a person's beaten opponents.</p> <p>You can save a tournament locally to open again later.</p> <h4>Plans for future releases</h4> <ul> <li> Add a Swiss Chess pairing option </li> <li> Add the ability to have different scoring & countback methods </li> <li> Add the ability to record spot prizes </li> </ul> <p>Feedback is welcome.</p> <button ng-click=toggleAbout() class=\\\"btn btn-primary btn-block\\\">Close</button>\";\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<nav class=\\\"navbar navbar-default\\\"> <div class=container-fluid> <div class=navbar-header> <button type=button class=\\\"navbar-toggle collapsed\\\" data-toggle=collapse data-target=#bs-example-navbar-collapse-1 aria-expanded=false> <span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span> </button> <a class=navbar-brand href=#>Comp Runner</a> </div> <div class=\\\"navbar-collapse collapse\\\" id=bs-example-navbar-collapse-1 aria-expanded=false style=height:1px> <ul class=\\\"nav navbar-nav navbar-right\\\"> <li><a href=# ng-click=toggleAbout()>Help / About</a></li> <li class=dropdown> <a href=# class=dropdown-toggle data-toggle=dropdown role=button aria-expanded=false>Save / Load / Reset <span class=caret></span></a> <ul class=dropdown-menu role=menu> <li ng-if=saved class=\\\"dropdown-header dropdown-header-wrapped\\\"><p>{{saved}}</p></li> <li class=divider></li> <li><a href=# ng-if=game.isInitialised ng-click=reset()>Reset</a></li> <li><a href=# ng-if=game.isInitialised ng-click=save()>Save</a></li> <li><a href=# ng-if=saved ng-click=load()>Load</a></li> <li><a href=# ng-if=saved ng-click=deleteSave()>Delete save</a></li> </ul> </li> </ul> </div> </div> </nav>\";\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div> <form name=playerDetails> <h2>Player details</h2> <div ng-if=\\\"playerOrder.length===0\\\"> <p>Enter a name for each player and the army they will be using.</p> <p>Once you have entered this information, click on the <strong>Create First Found</strong> button</p> </div> <div ng-repeat=\\\"player in players\\\" class=row> <div class=col-xs-12> <h4>Player {{player.id}} <small> {{player.score}} points ({{player.countBack}}) </small>  </h4></div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group ng-class=\\\"playerDetails['playerName'+player.id].$touched && playerDetails['playerName'+player.id].$invalid ? 'has-error' : ''\\\"> <label for=playerName{{player.id}} class=hidden-xs>Name</label> <input class=form-control ng-model=player.name name=playerName{{player.id}} id=playerName{{player.id}} placeholder=Name required ng-pattern=/[a-zA-Z0-9]{3,}/ /> <span class=help-block ng-show=\\\"playerDetails['playerName'+player.id].$touched && playerDetails['playerName'+player.id].$invalid\\\">please enter a name</span> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group ng-class=\\\"playerDetails['playerArmy'+player.id].$touched && playerDetails['playerArmy'+player.id].$invalid ? 'has-error' : ''\\\"> <label for=playerArmy{{player.id}} class=hidden-xs>Army</label> <input class=form-control ng-model=player.army name=playerArmy{{player.id}} id=playerArmy{{player.id}} placeholder=Army required/> <span class=help-block ng-show=\\\"playerDetails['playerArmy'+player.id].$touched && playerDetails['playerArmy'+player.id].$invalid\\\">Please enter an army</span> </div> </div> </div> <button ng-click=setupFirstRound() class=\\\"btn btn-block\\\" ng-class=\\\"playerDetails.$invalid ? 'btn-disabled' : 'btn-primary'\\\" ng-disabled=playerDetails.$invalid ng-if=\\\"playerOrder.length===0\\\">Create First Round</button> </form> </div>\";\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<table class=\\\"table table-striped\\\"> <thead> <th class=col-xs-4> Name </th> <th class=col-xs-4> Army </th> <th class=col-xs-2> Score (Countback) </th> </thead> <tr ng-repeat=\\\"playerId in finalOrder\\\"> <td class=col-xs-4> {{players[playerId].name}} </td> <td class=col-xs-4> {{players[playerId].army}} </td> <td class=col-xs-2> {{players[playerId].score}} ({{players[playerId].countBack}}) </td> </tr> </table> \";\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div> <form name=roundForm> <h2>Round {{round.roundNumber}}</h2> <div ng-repeat=\\\"game in round.games\\\" class=form-group> <div ng-if=\\\"game.result != 'bye'\\\"> <label for=result{{game.gameNumber}}> Game {{game.gameNumber}} <small>{{players[game.player1].name}} ({{players[game.player1].army}}) vs {{players[game.player2].name}} ({{players[game.player2].army}})</small> </label> <select name=result{{game.gameNumber}} ng-if=\\\"isCurrentRound=='true'\\\" id=result{{game.gameNumber}} ng-model=game.result required class=form-control> <option value=\\\"\\\">---select result---</option> <option value=\\\"Player 1 win\\\">{{players[game.player1].name}} win</option> <option value=\\\"Player 2 win\\\">{{players[game.player2].name}} win</option> <option value=Draw>Draw</option> </select> <p ng-if=\\\"isCurrentRound!='true'\\\">{{game.result}}</p> </div> <div ng-if=\\\"game.result == 'bye'\\\"> <label>Bye for {{players[game.player2].name}}</label> </div> </div> <button ng-click=submit() ng-disabled=roundForm.$invalid ng-if=\\\"isCurrentRound=='true'\\\" class=\\\"btn btn-block\\\" ng-class=\\\"roundForm.$invalid ? 'btn-disabled' : 'btn-primary'\\\">Complete round</button> </form> </div>\";\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<form name=setupForm> <h2>Get Started</h2> <p>Enter a name for your competition, how many players and how many rounds you will be playing.</p> <p>Once you have entered this information, click on the <strong>Get Started</strong> button</p> <div class=form-group ng-class=\\\"setupForm.title.$touched && setupForm.title.$invalid ? 'has-error' : ''\\\"> <label for=title>Competition Name:</label> <input class=form-control ng-model=game.title id=title name=title type=text placeholder=\\\"Competition name\\\" required/> <span class=help-block ng-show=\\\"setupForm.title.$touched && setupForm.title.$invalid\\\">Please enter a title</span> </div> <div class=form-group ng-class=\\\"setupForm.numPlayers.$touched && setupForm.numPlayers.$invalid ? 'has-error' : ''\\\"> <label for=numPlayers>Number of players:</label> <input class=form-control ng-model=game.numPlayers id=numPlayers name=numPlayers type=number placeholder=\\\"Number of players\\\" min=1 max=999 required/> <span class=help-block ng-show=\\\"setupForm.numPlayers.$touched && setupForm.numPlayers.$invalid\\\">Please enter a number between 1 and 999</span> </div> <div class=form-group ng-class=\\\"setupForm.numRounds.$touched && setupForm.numRounds.$invalid ? 'has-error' : ''\\\"> <label for=numRounds>Number of rounds:</label> <input class=form-control ng-model=game.numRounds id=numRounds name=numRounds type=number placeholder=\\\"Number of rounds\\\" min=1 max=999 required/> <span class=help-block ng-show=\\\"setupForm.numRounds.$touched && setupForm.numRounds.$invalid\\\">Please enter a number between 1 and 999</span> </div> <div> <button ng-click=runSetup() ng-disabled=setupForm.$invalid class=\\\"btn btn-block\\\" ng-class=\\\"setupForm.$invalid ? 'btn-disabled' : 'btn-primary'\\\">Get Started</button> </div> </form> \";\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=container> <sc-menu></sc-menu> <sc-about ng-if=showAbout></sc-about> <div ng-if=!showAbout> <sc-setup ng-if=!game.isInitialised setup=game.getStarted() game=game></sc-setup> <div ng-if=game.isInitialised> <h1>{{game.title}}<br/><small>{{game.numPlayers}} Players : {{game.numRounds}} Rounds</small></h1> <sc-tabs></sc-tabs> <sc-player-details ng-if=\\\"game.activeTab=='players'\\\" players=getAllPlayers() player-order=game.playerOrder setup-first-round=game.setupFirstRound()></sc-player-details> <sc-round ng-if=\\\"game.activeTab!='players' && game.activeTab!='results' \\\" players=getAllPlayers() round=game.rounds[game.activeTab] complete-round=game.completeRound() is-current-round=\\\"{{game.activeTab == game.currentRoundNumber}}\\\"></sc-round> <sc-results ng-if=\\\"game.activeTab=='results'\\\" players=getAllPlayers() final-order=game.finalOrder></sc-results> </div> </div> </div>\";\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<ul class=\\\"nav nav-tabs\\\"> <li role=presentation ng-class=\\\"game.activeTab=='players' ? 'active':''\\\"><a href=# ng-click=\\\"showTab('players')\\\">Players</a></li> <li role=presentation ng-repeat=\\\"round in game.rounds\\\" ng-class=\\\"game.activeTab==round.roundNumber ? 'active':''\\\"><a href=# ng-click=showTab(round.roundNumber)>Round {{round.roundNumber}}</a></li> <li role=presentation ng-if=\\\"game.finalOrder.length > 0\\\" ng-class=\\\"game.activeTab=='results' ? 'active':''\\\"><a href=# ng-click=\\\"showTab('results')\\\">Results</a></li> </ul>\";\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(2);\n\nangular.module('swissChess', []);\n\n__webpack_require__(1);\n\n/***/ })\n],[16]);\n\n\n// WEBPACK FOOTER //\n// app.bundle.js"," require('../services/players');\r\n require('../services/game');\r\n require('./swissChessDirectives');\r\n require('./swissChessController');\r\n\r\nangular.module('swissChess').component('swissChess', {\r\n    template: require('../views/swiss-chess.html'),\r\n    controller: \"swissChessCtrl\"\r\n  });\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./components/swissChessComponent.js","    const SAVE_PROMPT = \"Are you sure, this will overwrite your saved competition?\\n\\nPress ok to continue.\";\r\n    const LOAD_PROMPT = \"Are you sure, this will overwrite all details of your current competition?\\n\\nPress ok to continue.\";\r\n    const DELETE_PROMPT = \"Are you sure, this will delete your saved competition?\\n\\nPress ok to continue.\";\r\n    const RESET_PROMPT = \"Are you sure, this will clear your current competition?\\n\\nPress ok to continue.\";\r\n    const SAVED_GAME_NAME = \"savedComp\";\r\n  swissChessCtrl.$inject = ['$scope','playersFactory','gameFactory'];\r\n\r\n  angular.module('swissChess').controller('swissChessCtrl', swissChessCtrl);\r\n\r\n\r\n  function swissChessCtrl($scope, players, game){\r\n\r\n    $scope.saved = false;\r\n    $scope.showAbout = false;\r\n\r\n    $scope.toggleAbout = function toggleAbout(){\r\n      $scope.showAbout = !$scope.showAbout;\r\n    }\r\n\r\n    // initialises the game and checks if there is a saved game that can be loaded\r\n    $scope.init = function init() {\r\n      game.init();\r\n      const savedGame = localStorage.getItem(SAVED_GAME_NAME);\r\n      if(savedGame){\r\n        const savedObj = JSON.parse(savedGame);\r\n        $scope.saved = getSavedDetails(savedObj);\r\n      }\r\n    }\r\n\r\n    //reset the competition\r\n    $scope.reset = function reset(){\r\n      if(!confirm(RESET_PROMPT)){\r\n        return;\r\n      }\r\n      $scope.init();\r\n    };\r\n\r\n    // reads some details of any save game\r\n    function getSavedDetails(savedObj) {\r\n        return `Competition ${savedObj.title} (${savedObj.numRounds} rounds : ${savedObj.numPlayers} players) Saved on ${savedObj.savedOn}`;\r\n    }\r\n\r\n    // deletes a saved game\r\n    $scope.deleteSave = function deleteSave(){\r\n      if(!confirm(DELETE_PROMPT)){\r\n        return;\r\n      }\r\n      localStorage.removeItem(SAVED_GAME_NAME);\r\n      $scope.saved = false;\r\n    };\r\n\r\n    // saves the game details to local storage\r\n    $scope.save = function save(){\r\n      if($scope.saved && game.initialised && !confirm(SAVE_PROMPT)){\r\n        return;\r\n      }\r\n      const saveObj = game.getSaveObj();\r\n      localStorage.setItem(SAVED_GAME_NAME, JSON.stringify(saveObj));\r\n      $scope.saved =getSavedDetails(saveObj);\r\n    };\r\n\r\n    // loads the game details from local storage\r\n    $scope.load = function load(){\r\n      if(game.isInitialised && !confirm(LOAD_PROMPT)){\r\n        return;\r\n      }\r\n      const saveStr = localStorage.getItem(SAVED_GAME_NAME);      \r\n      const saveObj = JSON.parse(saveStr);\r\n      game.setFromSaveObj(saveObj);\r\n    };\r\n\r\n    //bind player functions\r\n    $scope.getAllPlayers = function getAllPlayers() {\r\n        return players.getAllPlayers();\r\n    };\r\n\r\n    //bind game\r\n    $scope.game = game;\r\n\r\n    $scope.showTab = function showTab(tab) {\r\n        game.activeTab = tab;\r\n    }\r\n\r\n    //initialise the comp\r\n    $scope.init();\r\n  }\r\n\n\n\n// WEBPACK FOOTER //\n// ./components/swissChessController.js","\r\n  angular.module('swissChess').directive(\"scTabs\", function(){\r\n    return {\r\n      type: \"E\",\r\n      template: require('../views/tabs.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scAbout\", function(){\r\n    return {\r\n      type: \"E\",\r\n      template: require('../views/about.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scMenu\", function() {\r\n    return {\r\n      type: \"E\",\r\n      template: require('../views/menu.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scSetup\", function() {    \r\n    return {\r\n      type: \"E\",\r\n      scope: {\r\n          runSetup: \"&setup\",\r\n          game:\"=\"\r\n      },\r\n      template: require('../views/setup.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scPlayerDetails\", function() {  \r\n    return {\r\n      type: \"E\",\r\n      scope: {\r\n        players:\"=\",\r\n        playerOrder:\"=\",\r\n        setupFirstRound: \"&\"\r\n      },\r\n      template: require('../views/player-details.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scRound\", function() {\r\n    return {\r\n      type: \"E\",\r\n      scope: {\r\n        players:\"=\",\r\n        round:\"=\",\r\n        completeRound: \"&\",\r\n        isCurrentRound: \"@\"\r\n      },\r\n      link: function(scope, element, attr) {\r\n        scope.submit = function(){\r\n          scope.roundForm.$setPristine();\r\n          scope.roundForm.$setUntouched();\r\n          scope.completeRound();\r\n        }\r\n\r\n      },\r\n      template: require('../views/round.html')\r\n    };\r\n  });\r\n\r\n  angular.module('swissChess').directive(\"scResults\", function() {\r\n    return {\r\n      type: \"E\",\r\n      scope: {\r\n        players: \"=\",\r\n        finalOrder: \"=\"\r\n      },\r\n      template: require('../views/results.html')\r\n    };\r\n  });\n\n\n// WEBPACK FOOTER //\n// ./components/swissChessDirectives.js","\r\nconst POINTS_FOR_WIN = 3;\r\nconst POINTS_FOR_BYE = 3;\r\nconst POINTS_FOR_DRAW = 1;\r\n\r\ngameFactory.$inject = ['playersFactory'];\r\nangular.module('swissChess').factory(\"gameFactory\", gameFactory);\r\n\r\nfunction gameFactory(players){\r\n    \r\n    const gameFactory = {};\r\n    gameFactory.rounds = {};\r\n    gameFactory.playerOrder = [];\r\n    \r\n    // returns all properties to their empty defaults\r\n    gameFactory.init = function init(){      \r\n      gameFactory.activeTab = \"\";\r\n      gameFactory.isInitialised = false;\r\n      gameFactory.numPlayers = null;\r\n      gameFactory.numRounds = null;\r\n      gameFactory.title = null;\r\n      players.resetPlayers();\r\n      gameFactory.currentRoundNumber = \"0\";\r\n      gameFactory.rounds = {};\r\n      gameFactory.playerOrder = [];\r\n      gameFactory.finalOrder = [];\r\n    }\r\n\r\n    //initialises the game and the players, and sets the tab to the players screen\r\n    gameFactory.getStarted = function getStarted(){\r\n      gameFactory.isInitialised = true;\r\n      players.initPlayers(gameFactory.numPlayers);\r\n      gameFactory.activeTab = \"players\";      \r\n    };\r\n\r\n    // sets up the initial player order and the first round\r\n    gameFactory.setupFirstRound = function setupFirstRound() {\r\n      gameFactory.playerOrder = Object.keys(players.getAllPlayers());\r\n      gameFactory.setupRound(\"1\");\r\n    }\r\n    \r\n    // sets up the games in a round\r\n    // called when moving onto a new round\r\n    gameFactory.setupRound = function setupRound(newRoundNumber){\r\n      gameFactory.currentRoundNumber = newRoundNumber;\r\n      gameFactory.rounds[newRoundNumber] = {roundNumber:newRoundNumber,games:{}};\r\n      const currentRound = gameFactory.rounds[gameFactory.currentRoundNumber];\r\n      players.shufflePlayers(gameFactory.playerOrder);\r\n      \r\n      const numGames = gameFactory.playerOrder.length /2;\r\n      for(let i=0;i<numGames;i++){\r\n      currentRound.games[i+1] = {\r\n          gameNumber:i+1,\r\n          player1:gameFactory.playerOrder[i],\r\n          player2:gameFactory.playerOrder[gameFactory.playerOrder.length - i - 1],\r\n          result: i === gameFactory.playerOrder.length - i - 1 ? 'bye' : ''\r\n      };\r\n      }\r\n      gameFactory.activeTab = newRoundNumber;\r\n    }\r\n        \r\n    // completes a round\r\n    // called when finishing that round\r\n    gameFactory.completeRound = function completeRound() {\r\n      const round = gameFactory.rounds[gameFactory.currentRoundNumber];\r\n\r\n      for(let gameId in round.games){\r\n        const game = round.games[gameId];\r\n        const player1 =  players.getPlayerById(game.player1);\r\n        const player2 =  players.getPlayerById(game.player2);\r\n        switch (game.result) {\r\n          case \"Player 1 win\":\r\n          player1.score += POINTS_FOR_WIN;\r\n          break;\r\n          case \"Player 2 win\":\r\n          player2.score += POINTS_FOR_WIN;\r\n          break;\r\n          case \"bye\":\r\n          player1.score += POINTS_FOR_BYE;\r\n          break;\r\n          default://a draw\r\n          player1.score += POINTS_FOR_DRAW;\r\n          player2.score += POINTS_FOR_DRAW;\r\n        }\r\n      }\r\n      if(gameFactory.numRounds == gameFactory.currentRoundNumber) {\r\n        completeComp();\r\n        gameFactory.activeTab = \"results\";\r\n      }else{\r\n        const nextRoundNumber = parseInt(gameFactory.currentRoundNumber) + 1;\r\n        gameFactory.setupRound(nextRoundNumber);\r\n      }\r\n    }\r\n    //completes a competition and generates the results\r\n    function completeComp() {\r\n        generateCountBack();\r\n        gameFactory.finalOrder = players.sortPlayers(Object.keys(players.getAllPlayers()), \"countBack\");\r\n        gameFactory.finalOrder = players.sortPlayers(gameFactory.finalOrder, \"score\");\r\n        gameFactory.currentRoundNumber = 0;\r\n    }\r\n\r\n    // generates the countback for each player by adding the scores of all the players they have beaten\r\n    function generateCountBack() {    \r\n      for(let roundNumber in gameFactory.rounds){\r\n        const round = gameFactory.rounds[roundNumber];\r\n        for(let gameNumber in round.games){\r\n          const game = round.games[gameNumber];\r\n          const player1 =  players.getPlayerById(game.player1);\r\n          const player2 =  players.getPlayerById(game.player2);\r\n          switch (game.result) {\r\n          case \"Player 1 win\":\r\n            player1.countBack += player2.score;\r\n            break;\r\n          case \"Player 2 win\":\r\n            player2.countBack += player1.score;\r\n            break;\r\n          case \"bye\":\r\n            break;\r\n          default:\r\n            player1.countBack += player2.score/2;\r\n            player2.countBack += player1.score/2;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // takes the comp's  state and puts it into an object that can be saved\r\n    gameFactory.getSaveObj = function getSaveObj() {      \r\n      const saveObj = {};\r\n      saveObj.finalOrder = gameFactory.finalOrder;\r\n      saveObj.isInitialised = gameFactory.isInitialised;\r\n      saveObj.numPlayers = gameFactory.numPlayers;\r\n      saveObj.numRounds = gameFactory.numRounds;\r\n      saveObj.title = gameFactory.title;\r\n      saveObj.rounds = gameFactory.rounds;\r\n      saveObj.currentRoundNumber = gameFactory.currentRoundNumber;\r\n      saveObj.players = players.getAllPlayers();\r\n      saveObj.activeTab =  gameFactory.activeTab;\r\n      saveObj.playerOrder = gameFactory.playerOrder;\r\n      saveObj.savedOn = formatAMPM();\r\n      return saveObj;\r\n    }\r\n\r\n    // sets all the game details from a save object that is passed in\r\n    gameFactory.setFromSaveObj = function setFromSaveObj(saveObj) {\r\n      gameFactory.finalOrder = saveObj.finalOrder;\r\n      gameFactory.isInitialised= saveObj.isInitialised;\r\n      gameFactory.numPlayers= saveObj.numPlayers;\r\n      gameFactory.numRounds= saveObj.numRounds;\r\n      gameFactory.title= saveObj.title;\r\n      gameFactory.rounds= saveObj.rounds;\r\n      gameFactory.currentRoundNumber= saveObj.currentRoundNumber;\r\n      players.setAllPlayers( saveObj.players);\r\n      gameFactory.activeTab= saveObj.activeTab;       \r\n      gameFactory.playerOrder = saveObj.playerOrder;\r\n    }\r\n\r\n    function formatAMPM() {\r\n      const d = new Date(),\r\n        minutes = d.getMinutes().toString().length == 1 ? '0'+d.getMinutes() : d.getMinutes(),\r\n        hours = d.getHours().toString().length == 1 ? '0'+d.getHours() : d.getHours(),\r\n        ampm = d.getHours() >= 12 ? 'pm' : 'am',\r\n        months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],\r\n        days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\n      return days[d.getDay()]+' '+months[d.getMonth()]+' '+d.getDate()+' '+d.getFullYear()+' '+hours+':'+minutes+ampm;\r\n    }\r\n  \r\n    return gameFactory;\r\n  }\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/game.js","angular.module('swissChess').factory(\"playersFactory\", [function(){\r\n    let players = {};\r\n    let playersFactory = {};\r\n\r\n    playersFactory.sortPlayers = function sortPlayers(currentOrder, sortBy){\r\n      return currentOrder.sort((a,b) => {\r\n        return players[b][sortBy] - players[a][sortBy];\r\n      });\r\n    };\r\n\r\n    playersFactory.shufflePlayers = function shufflePlayers(currentOrder) {\r\n      const modifier = currentOrder.length % 2 ? 1 : 2;//if an odd number of players, we need to adjust our shuffle, else the last player never gets a bye\r\n      currentOrder.unshift(currentOrder[currentOrder.length-modifier]);\r\n      currentOrder.splice(currentOrder.length-modifier, 1)\r\n    };\r\n\r\n    playersFactory.initPlayers = function initPlayers(numPlayers) {\r\n      for(let i=0;i<numPlayers;i++){\r\n        players[i+1]={id:i+1,score:0,countBack:0};\r\n      }\r\n    };\r\n\r\n    playersFactory.resetPlayers = function resetPlayers() {\r\n      players = {};\r\n    };\r\n\r\n    playersFactory.setAllPlayers = function setAllPlayers(newPlayers) {\r\n      players = Object.assign({},newPlayers);\r\n    };\r\n    \r\n    playersFactory.getAllPlayers = function getAllPlayers() {\r\n      return players;\r\n    };\r\n\r\n    playersFactory.getPlayerById = function getPlayer(id) {\r\n      return players[id];\r\n    }\r\n\r\n    return playersFactory;\r\n  }]);\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/players.js","module.exports = \"<h2>About Comp Runner</h2> <p>Comp Runner is a simple app, designed to run on any modern browser, to help tournament organisers to keep track of scoring.</p> <p>Version 1 automatically organises players into rounds based on a simple round robin algorithm.</p> <p>Scoring is handled automatically, with 3 points for a win and 1 point for a draw. Countback is handled at the end of a comp by summing the scores of a person's beaten opponents.</p> <p>You can save a tournament locally to open again later.</p> <h4>Plans for future releases</h4> <ul> <li> Add a Swiss Chess pairing option </li> <li> Add the ability to have different scoring & countback methods </li> <li> Add the ability to record spot prizes </li> </ul> <p>Feedback is welcome.</p> <button ng-click=toggleAbout() class=\\\"btn btn-primary btn-block\\\">Close</button>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/about.html\n// module id = 8\n// module chunks = 0","module.exports = \"<nav class=\\\"navbar navbar-default\\\"> <div class=container-fluid> <div class=navbar-header> <button type=button class=\\\"navbar-toggle collapsed\\\" data-toggle=collapse data-target=#bs-example-navbar-collapse-1 aria-expanded=false> <span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span> </button> <a class=navbar-brand href=#>Comp Runner</a> </div> <div class=\\\"navbar-collapse collapse\\\" id=bs-example-navbar-collapse-1 aria-expanded=false style=height:1px> <ul class=\\\"nav navbar-nav navbar-right\\\"> <li><a href=# ng-click=toggleAbout()>Help / About</a></li> <li class=dropdown> <a href=# class=dropdown-toggle data-toggle=dropdown role=button aria-expanded=false>Save / Load / Reset <span class=caret></span></a> <ul class=dropdown-menu role=menu> <li ng-if=saved class=\\\"dropdown-header dropdown-header-wrapped\\\"><p>{{saved}}</p></li> <li class=divider></li> <li><a href=# ng-if=game.isInitialised ng-click=reset()>Reset</a></li> <li><a href=# ng-if=game.isInitialised ng-click=save()>Save</a></li> <li><a href=# ng-if=saved ng-click=load()>Load</a></li> <li><a href=# ng-if=saved ng-click=deleteSave()>Delete save</a></li> </ul> </li> </ul> </div> </div> </nav>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/menu.html\n// module id = 9\n// module chunks = 0","module.exports = \"<div> <form name=playerDetails> <h2>Player details</h2> <div ng-if=\\\"playerOrder.length===0\\\"> <p>Enter a name for each player and the army they will be using.</p> <p>Once you have entered this information, click on the <strong>Create First Found</strong> button</p> </div> <div ng-repeat=\\\"player in players\\\" class=row> <div class=col-xs-12> <h4>Player {{player.id}} <small> {{player.score}} points ({{player.countBack}}) </small>  </h4></div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group ng-class=\\\"playerDetails['playerName'+player.id].$touched && playerDetails['playerName'+player.id].$invalid ? 'has-error' : ''\\\"> <label for=playerName{{player.id}} class=hidden-xs>Name</label> <input class=form-control ng-model=player.name name=playerName{{player.id}} id=playerName{{player.id}} placeholder=Name required ng-pattern=/[a-zA-Z0-9]{3,}/ /> <span class=help-block ng-show=\\\"playerDetails['playerName'+player.id].$touched && playerDetails['playerName'+player.id].$invalid\\\">please enter a name</span> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group ng-class=\\\"playerDetails['playerArmy'+player.id].$touched && playerDetails['playerArmy'+player.id].$invalid ? 'has-error' : ''\\\"> <label for=playerArmy{{player.id}} class=hidden-xs>Army</label> <input class=form-control ng-model=player.army name=playerArmy{{player.id}} id=playerArmy{{player.id}} placeholder=Army required/> <span class=help-block ng-show=\\\"playerDetails['playerArmy'+player.id].$touched && playerDetails['playerArmy'+player.id].$invalid\\\">Please enter an army</span> </div> </div> </div> <button ng-click=setupFirstRound() class=\\\"btn btn-block\\\" ng-class=\\\"playerDetails.$invalid ? 'btn-disabled' : 'btn-primary'\\\" ng-disabled=playerDetails.$invalid ng-if=\\\"playerOrder.length===0\\\">Create First Round</button> </form> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/player-details.html\n// module id = 10\n// module chunks = 0","module.exports = \"<table class=\\\"table table-striped\\\"> <thead> <th class=col-xs-4> Name </th> <th class=col-xs-4> Army </th> <th class=col-xs-2> Score (Countback) </th> </thead> <tr ng-repeat=\\\"playerId in finalOrder\\\"> <td class=col-xs-4> {{players[playerId].name}} </td> <td class=col-xs-4> {{players[playerId].army}} </td> <td class=col-xs-2> {{players[playerId].score}} ({{players[playerId].countBack}}) </td> </tr> </table> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/results.html\n// module id = 11\n// module chunks = 0","module.exports = \"<div> <form name=roundForm> <h2>Round {{round.roundNumber}}</h2> <div ng-repeat=\\\"game in round.games\\\" class=form-group> <div ng-if=\\\"game.result != 'bye'\\\"> <label for=result{{game.gameNumber}}> Game {{game.gameNumber}} <small>{{players[game.player1].name}} ({{players[game.player1].army}}) vs {{players[game.player2].name}} ({{players[game.player2].army}})</small> </label> <select name=result{{game.gameNumber}} ng-if=\\\"isCurrentRound=='true'\\\" id=result{{game.gameNumber}} ng-model=game.result required class=form-control> <option value=\\\"\\\">---select result---</option> <option value=\\\"Player 1 win\\\">{{players[game.player1].name}} win</option> <option value=\\\"Player 2 win\\\">{{players[game.player2].name}} win</option> <option value=Draw>Draw</option> </select> <p ng-if=\\\"isCurrentRound!='true'\\\">{{game.result}}</p> </div> <div ng-if=\\\"game.result == 'bye'\\\"> <label>Bye for {{players[game.player2].name}}</label> </div> </div> <button ng-click=submit() ng-disabled=roundForm.$invalid ng-if=\\\"isCurrentRound=='true'\\\" class=\\\"btn btn-block\\\" ng-class=\\\"roundForm.$invalid ? 'btn-disabled' : 'btn-primary'\\\">Complete round</button> </form> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/round.html\n// module id = 12\n// module chunks = 0","module.exports = \"<form name=setupForm> <h2>Get Started</h2> <p>Enter a name for your competition, how many players and how many rounds you will be playing.</p> <p>Once you have entered this information, click on the <strong>Get Started</strong> button</p> <div class=form-group ng-class=\\\"setupForm.title.$touched && setupForm.title.$invalid ? 'has-error' : ''\\\"> <label for=title>Competition Name:</label> <input class=form-control ng-model=game.title id=title name=title type=text placeholder=\\\"Competition name\\\" required/> <span class=help-block ng-show=\\\"setupForm.title.$touched && setupForm.title.$invalid\\\">Please enter a title</span> </div> <div class=form-group ng-class=\\\"setupForm.numPlayers.$touched && setupForm.numPlayers.$invalid ? 'has-error' : ''\\\"> <label for=numPlayers>Number of players:</label> <input class=form-control ng-model=game.numPlayers id=numPlayers name=numPlayers type=number placeholder=\\\"Number of players\\\" min=1 max=999 required/> <span class=help-block ng-show=\\\"setupForm.numPlayers.$touched && setupForm.numPlayers.$invalid\\\">Please enter a number between 1 and 999</span> </div> <div class=form-group ng-class=\\\"setupForm.numRounds.$touched && setupForm.numRounds.$invalid ? 'has-error' : ''\\\"> <label for=numRounds>Number of rounds:</label> <input class=form-control ng-model=game.numRounds id=numRounds name=numRounds type=number placeholder=\\\"Number of rounds\\\" min=1 max=999 required/> <span class=help-block ng-show=\\\"setupForm.numRounds.$touched && setupForm.numRounds.$invalid\\\">Please enter a number between 1 and 999</span> </div> <div> <button ng-click=runSetup() ng-disabled=setupForm.$invalid class=\\\"btn btn-block\\\" ng-class=\\\"setupForm.$invalid ? 'btn-disabled' : 'btn-primary'\\\">Get Started</button> </div> </form> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/setup.html\n// module id = 13\n// module chunks = 0","module.exports = \"<div class=container> <sc-menu></sc-menu> <sc-about ng-if=showAbout></sc-about> <div ng-if=!showAbout> <sc-setup ng-if=!game.isInitialised setup=game.getStarted() game=game></sc-setup> <div ng-if=game.isInitialised> <h1>{{game.title}}<br/><small>{{game.numPlayers}} Players : {{game.numRounds}} Rounds</small></h1> <sc-tabs></sc-tabs> <sc-player-details ng-if=\\\"game.activeTab=='players'\\\" players=getAllPlayers() player-order=game.playerOrder setup-first-round=game.setupFirstRound()></sc-player-details> <sc-round ng-if=\\\"game.activeTab!='players' && game.activeTab!='results' \\\" players=getAllPlayers() round=game.rounds[game.activeTab] complete-round=game.completeRound() is-current-round=\\\"{{game.activeTab == game.currentRoundNumber}}\\\"></sc-round> <sc-results ng-if=\\\"game.activeTab=='results'\\\" players=getAllPlayers() final-order=game.finalOrder></sc-results> </div> </div> </div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/swiss-chess.html\n// module id = 14\n// module chunks = 0","module.exports = \"<ul class=\\\"nav nav-tabs\\\"> <li role=presentation ng-class=\\\"game.activeTab=='players' ? 'active':''\\\"><a href=# ng-click=\\\"showTab('players')\\\">Players</a></li> <li role=presentation ng-repeat=\\\"round in game.rounds\\\" ng-class=\\\"game.activeTab==round.roundNumber ? 'active':''\\\"><a href=# ng-click=showTab(round.roundNumber)>Round {{round.roundNumber}}</a></li> <li role=presentation ng-if=\\\"game.finalOrder.length > 0\\\" ng-class=\\\"game.activeTab=='results' ? 'active':''\\\"><a href=# ng-click=\\\"showTab('results')\\\">Results</a></li> </ul>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/tabs.html\n// module id = 15\n// module chunks = 0","require('./style.css');\r\n\r\nangular.module('swissChess', []);\r\n\r\nrequire('./components/swissChessComponent');\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./app.js"],"sourceRoot":""}